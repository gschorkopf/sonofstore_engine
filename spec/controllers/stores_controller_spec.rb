require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StoresController do
  before (:each) do
    ApplicationController.stub!(:require_admin).and_return(true)
  end

  # This should return the minimal set of attributes required to create a valid
  # Store. As you add validations to Store, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { name: "MyString", path: 'my-string', description: 'stringy for sure' }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StoresController. Be sure to keep this updated too.
  def valid_session
    {path: 'my-string'}
  end

  describe "GET index" do
    it "assigns all stores as @stores" do
      store = Store.create! valid_attributes
      store.approval_status = 'approved'
      store.active = true
      store.save
      get :index, {}, valid_session
      assigns(:stores).should eq([store])
    end
  end

  describe "GET new" do
    it "assigns a new store as @store" do
      get :new, {}, valid_session
      assigns(:store).should be_a_new(Store)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Store" do
        customer = FactoryGirl.create(:customer)
        user = FactoryGirl.create(:user, customer_id: customer.id)
        controller.stub(:current_user).and_return(user)
        # stub(:current_user).and_return(user)
        expect {
          post :create, {:store => valid_attributes}
        }.to change(Store, :count).by(1)
      end

      it "assigns a newly created store as @store" do
        pending "this isn't working because of current_user needs"
        post :create, {:store => valid_attributes}, valid_session
        assigns(:store).should be_a(Store)
        assigns(:store).should be_persisted
      end

      it "redirects to the created store" do
        pending "this isn't working because of current_user needs"
        post :create, {:store => valid_attributes}, valid_session
        response.should redirect_to(Store.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved store as @store" do
        # Trigger the behavior that occurs when invalid params are submitted
        Store.any_instance.stub(:save).and_return(false)
        post :create, {:store => { "name" => "invalid value" }}, valid_session
        assigns(:store).should be_a_new(Store)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Store.any_instance.stub(:save).and_return(false)
        post :create, {:store => { "name" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end
end
